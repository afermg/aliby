[tool.poetry]
name = "aliby"
version = "0.1.41"
description = "Process and analyse live-cell imaging data"
authors = ["Alan Munoz <alan.munoz@ed.ac.uk>"]
packages = [
    { include = "aliby" },
    { include = "extraction" },
    { include = "agora" },
    { include = "postprocessor" },
]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.8,<3.11"
PyYAML = "^6.0"
py-find-1st = "^1.1.5"
opencv-python = "*"
scipy = ">=1.7.3"
flatten-dict = "^0.4.2"
numpy = "1.21.6" # Pinning numpy and pandas makes dep resolution much faster
pandas = "1.3.3"

[tool.poetry.group.pipeline.dependencies]
dask = "^2021.12.0"
tqdm = "^4.62.3" # progress bars
scikit-learn = ">=1.0.2" # Used for an extraction metric
py-find-1st = "^1.1.5" # Fast indexing
scikit-image = ">=0.18.1"
requests-toolbelt = "^0.9.1"
h5py = "2.10" # File I/O
imageio = "2.8.0" # For image-visualisation utilities
aliby-agora = "^0.2.30"
aliby-baby = "^0.1.14"
aliby-post = "^0.1.36"
p-tqdm = "^1.3.3" # Parallel progress bars
xmltodict = "^0.13.0" # read ome-tiff metadata
# zeroc-ice = {version="3.6.5", optional=true} # To be set as optional in the future

[tool.poetry.group.postprocessor.dependencies]
numpy = "1.21.6" # Pinning numpy and pandas makes dep resolution much faster
pandas = "1.3.3"
scipy = ">=1.4.1"
PyYAML = "^6.0"
more-itertools = "^8.12.0"
leidenalg = "^0.8.8"
aliby-agora = "^0.2.33"
seaborn = "^0.11.2"
scikit-learn = ">=0.22"
gaussianprocessderivatives = "^0.1.2"
p-tqdm = "^1.3.3"
pycatch22 = "^0.4.2"
pathos = "^0.2.8" # Lambda-friendly multithreading

[tool.poetry.group.network]
optional = true

[tool.poetry.group.network.dependencies]
omero-py = ">=5.6.2" # contact omero server
zeroc-ice = {version="3.6.5"} # networking interface, slow to build

[tool.poetry.group.gui]
optional = true

[tool.poetry.group.gui.dependencies]
napari = ">=0.4.16"
opencv-python = "==4.1.2.30"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
Sphinx = "^4.3.2"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^6.2.5"

[build-system]
requires = ["setuptools", "poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 79
target-version = ['py37']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 79
include_trailing_comma = true
